#!/usr/bin/env python

# Copyright 2011 GridCentric Inc.
# All Rights Reserved.
#
# Based off of the OpenStack nova-compute file 
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

"""Starter script for Nova GridCentric extension manager."""

# (amscanne): Normally, a nova service would import eventlet here and
# monkey_patch the core libraries so use the greenthread-friendly versions.
# However, we've encountered several strange problems that seem to stem from
# eventlet-style handling of events. In the manager workflow, the control flow
# seems to fall off a cliff at arbitrary points and never return. This is very
# bad, as it means that we get VMs that are stuck in the network allocation
# stage or the BUILD stage. We actually already have natural greenthread
# friendly cut points in our code (vmsconn uses the eventlet tpool methods to
# execute the underlying vms routines) so code paths will not block for
# excessive amounts of time and the greenthreads will still work as expected.
# Thus, we do *NOT* monkey patch the core routines, and instead allow them to
# block as normal.
import eventlet
eventlet.monkey_patch()

import gettext
import os
import sys

# (dscannell): We need to preload this otherwise it leads to our main
# manager class not loading because we won't be able to load the virt module
# so that we may pull out the connection string paramters.
from nova.compute import instance_types

# If ../nova/__init__.py exists, add ../ to Python search path, so that
# it will override what happens to be installed in /usr/(local/)lib/python...
possible_topdir = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                   os.pardir,
                                   os.pardir))
if os.path.exists(os.path.join(possible_topdir, 'nova', '__init__.py')):
    sys.path.insert(0, possible_topdir)

gettext.install('nova', unicode=1)

from nova import flags
from nova import log as logging
from nova import service
from nova import utils

if __name__ == '__main__':
    utils.default_flagfile()
    flags.FLAGS(sys.argv)
    flags.DEFINE_string('gridcentric_manager',
                        'gridcentric.nova.extension.manager.GridCentricManager',
                        'Manager for gridcentric')
    logging.setup()
    server = service.Service.create(binary='nova-gridcentric')
    service.serve(server)
    service.wait()
